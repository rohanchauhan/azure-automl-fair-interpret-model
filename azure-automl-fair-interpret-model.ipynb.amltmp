{
  "cells": [
    {
      "cell_type": "markdown",
      "source": [
        "# Training an Azure AutoML model with Explanations\r\n",
        "We are using credit risk modelling dataset from Kaggle for the task. In this project, we train an AutoML model using Azure AutoML and after selecting the model,\r\n",
        " we assess it's fairness and interpretablity."
      ],
      "metadata": {
        "nteract": {
          "transient": {
            "deleting": false
          }
        }
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "#### Install Required Packages"
      ],
      "metadata": {
        "nteract": {
          "transient": {
            "deleting": false
          }
        }
      }
    },
    {
      "cell_type": "code",
      "source": [
        "!pip install azureml-explain-model azureml-interpret azureml-sdk"
      ],
      "outputs": [],
      "execution_count": null,
      "metadata": {
        "collapsed": true,
        "jupyter": {
          "source_hidden": false,
          "outputs_hidden": false
        },
        "nteract": {
          "transient": {
            "deleting": false
          }
        }
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "#### Get Data"
      ],
      "metadata": {
        "nteract": {
          "transient": {
            "deleting": false
          }
        }
      }
    },
    {
      "cell_type": "code",
      "source": [
        "from azureml.core import Workspace, Datastore, Dataset\r\n",
        "\r\n",
        "# Get Workspace\r\n",
        "ws = Workspace.from_config()\r\n",
        "\r\n",
        "# Datastore Params\r\n",
        "datastore_name = 'rohands'\r\n",
        "storage_account_name = 'rohansa'\r\n",
        "container_name ='rohan-blob'\r\n",
        "# account_key = Add your account key for storage account\r\n",
        "\r\n",
        "# Get Datastore otherwise create new datastore and register blob storage\r\n",
        "if datastore_name in ws.datastores:\r\n",
        "    blob_ds = Datastore.get(ws, datastore_name=datastore_name)\r\n",
        "else:\r\n",
        "    try:\r\n",
        "        blob_ds = Datastore.register_azure_blob_container(\r\n",
        "            workspace=ws,\r\n",
        "            datastore_name=datastore_name,\r\n",
        "            account_name=storage_account_name,\r\n",
        "            #account_key = account_key\r\n",
        "            container_name=container_name\r\n",
        "        )\r\n",
        "    except Exception as ex:\r\n",
        "        print(ex)\r\n",
        "\r\n",
        "# Set as Default Datastore\r\n",
        "default_ds = ws.set_default_datastore(datastore_name)\r\n",
        "default_ds = ws.get_default_datastore()\r\n",
        "\r\n",
        "# Get Dataset otherise create new dataset and register\r\n",
        "dataset_name = 'credit risk dataset'\r\n",
        "\r\n",
        "if dataset_name not in ws.datasets:\r\n",
        "    default_ds.upload_files(\r\n",
        "        files=['./data/credit_risk_dataset.csv'],\r\n",
        "        target_path='credit-risk-data/',\r\n",
        "        overwrite=True,\r\n",
        "        show_progress=True)\r\n",
        "    \r\n",
        "    tab_dataset = Dataset.Tabular.from_delimited_files(\r\n",
        "        path=(default_ds,'credit-risk-data/*.csv'))\r\n",
        "        \r\n",
        "    try:\r\n",
        "        tab_dataset = tab_dataset.register(workspace=ws, \r\n",
        "                                name=dataset_name,\r\n",
        "                                description='credit risk data from Kaggle',\r\n",
        "                                tags = {'format':'CSV'},\r\n",
        "                                create_new_version=True)\r\n",
        "        print('Dataset registered.')\r\n",
        "    except Exception as ex:\r\n",
        "        print(ex)\r\n",
        "else:\r\n",
        "    tab_dataset = Dataset.get_by_name(ws, dataset_name)\r\n",
        "    print('Dataset already registered.')\r\n",
        "\r\n",
        "train_ds, test_ds = tab_dataset.random_split(percentage=0.7, seed=999)"
      ],
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Dataset already registered.\n"
          ]
        }
      ],
      "execution_count": 1,
      "metadata": {
        "collapsed": true,
        "jupyter": {
          "source_hidden": false,
          "outputs_hidden": false
        },
        "nteract": {
          "transient": {
            "deleting": false
          }
        },
        "gather": {
          "logged": 1625630328492
        }
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "##### Compute Target"
      ],
      "metadata": {
        "nteract": {
          "transient": {
            "deleting": false
          }
        }
      }
    },
    {
      "cell_type": "code",
      "source": [
        "from azureml.core.compute import ComputeTarget, AmlCompute\r\n",
        "from azureml.core.compute_target import ComputeTargetException\r\n",
        "\r\n",
        "# Compute params\r\n",
        "compute_name = 'rohan-vm-cluster'\r\n",
        "training_cluster = None\r\n",
        "\r\n",
        "if compute_name in ws.compute_targets:\r\n",
        "    training_cluster = ComputeTarget(ws, compute_name)\r\n",
        "    print(\"Using existing cluster.\")\r\n",
        "else:\r\n",
        "    try:\r\n",
        "        compute_config = AmlCompute.provisioning_configuration(\r\n",
        "            vm_size ='STANDARD_DS11_V2', \r\n",
        "            max_nodes=2 )\r\n",
        "        training_cluster = ComputeTarget.create(ws, compute_name, compute_config)\r\n",
        "        training_cluster.wait_for_completion(show_output=True)\r\n",
        "    except Exception as ex:\r\n",
        "        print(ex)\r\n",
        "    print(\"Cluster created.\")"
      ],
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Using existing cluster.\n"
          ]
        }
      ],
      "execution_count": 2,
      "metadata": {
        "collapsed": true,
        "jupyter": {
          "source_hidden": false,
          "outputs_hidden": false
        },
        "nteract": {
          "transient": {
            "deleting": false
          }
        },
        "gather": {
          "logged": 1625630333045
        }
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "#### Configure and Run AML"
      ],
      "metadata": {
        "nteract": {
          "transient": {
            "deleting": false
          }
        }
      }
    },
    {
      "cell_type": "code",
      "source": [
        "from azureml.train.automl import AutoMLConfig\n",
        "from azureml.core.experiment import Experiment\n",
        "from azureml.widgets import RunDetails\n",
        "\n",
        "# Configuration\n",
        "automl_config = AutoMLConfig(name='Automated Credit Risk Modelling',\n",
        "                             task='classification',\n",
        "                             compute_target=training_cluster,\n",
        "                             training_data = train_ds,\n",
        "                             validation_data = test_ds,\n",
        "                             label_column_name='loan_status',\n",
        "                             iterations=6,\n",
        "                             primary_metric = 'AUC_weighted',\n",
        "                             max_concurrent_iterations=2,\n",
        "                             featurization='auto'\n",
        "                             )\n",
        "\n",
        "\n",
        "# Run the Experiment\n",
        "automl_experiment = Experiment(ws, 'azure-automl-fair-interpret-model')\n",
        "automl_run = automl_experiment.submit(automl_config)\n",
        "RunDetails(automl_run).show()\n",
        "automl_run.wait_for_completion(show_output=True)"
      ],
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Submitting remote run.\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": "<IPython.core.display.HTML object>",
            "text/html": "<table style=\"width:100%\"><tr><th>Experiment</th><th>Id</th><th>Type</th><th>Status</th><th>Details Page</th><th>Docs Page</th></tr><tr><td>azure-automl-fair-interpret-model</td><td>AutoML_929a79e2-031a-4f39-93e0-2bd14384ba50</td><td>automl</td><td>NotStarted</td><td><a href=\"https://ml.azure.com/runs/AutoML_929a79e2-031a-4f39-93e0-2bd14384ba50?wsid=/subscriptions/23416925-66df-470c-b651-f378856d8ad7/resourcegroups/rohan-rg/workspaces/rohan-ws&amp;tid=13715ad3-e049-4909-899b-f9e22f99b1a5\" target=\"_blank\" rel=\"noopener\">Link to Azure Machine Learning studio</a></td><td><a href=\"https://docs.microsoft.com/en-us/python/api/overview/azure/ml/intro?view=azure-ml-py\" target=\"_blank\" rel=\"noopener\">Link to Documentation</a></td></tr></table>"
          },
          "metadata": {}
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": "_AutoMLWidget(widget_settings={'childWidgetDisplay': 'popup', 'send_telemetry': False, 'log_level': 'INFO', 'sâ€¦",
            "application/vnd.jupyter.widget-view+json": {
              "version_major": 2,
              "version_minor": 0,
              "model_id": "a5059c64c0764d32970457e2578ec846"
            }
          },
          "metadata": {}
        },
        {
          "output_type": "display_data",
          "data": {
            "application/aml.mini.widget.v1": "{\"status\": \"Completed\", \"workbench_run_details_uri\": \"https://ml.azure.com/runs/AutoML_929a79e2-031a-4f39-93e0-2bd14384ba50?wsid=/subscriptions/23416925-66df-470c-b651-f378856d8ad7/resourcegroups/rohan-rg/workspaces/rohan-ws&tid=13715ad3-e049-4909-899b-f9e22f99b1a5\", \"run_id\": \"AutoML_929a79e2-031a-4f39-93e0-2bd14384ba50\", \"run_properties\": {\"run_id\": \"AutoML_929a79e2-031a-4f39-93e0-2bd14384ba50\", \"created_utc\": \"2021-07-07T04:16:08.350712Z\", \"properties\": {\"num_iterations\": \"6\", \"training_type\": \"TrainFull\", \"acquisition_function\": \"EI\", \"primary_metric\": \"AUC_weighted\", \"train_split\": \"0\", \"acquisition_parameter\": \"0\", \"num_cross_validation\": null, \"target\": \"rohan-vm-cluster\", \"AMLSettingsJsonString\": \"{\\\"path\\\":null,\\\"name\\\":\\\"Automated Credit Risk Modelling\\\",\\\"subscription_id\\\":\\\"23416925-66df-470c-b651-f378856d8ad7\\\",\\\"resource_group\\\":\\\"rohan-rg\\\",\\\"workspace_name\\\":\\\"rohan-ws\\\",\\\"region\\\":\\\"centralindia\\\",\\\"compute_target\\\":\\\"rohan-vm-cluster\\\",\\\"spark_service\\\":null,\\\"azure_service\\\":\\\"remote\\\",\\\"many_models\\\":false,\\\"pipeline_fetch_max_batch_size\\\":1,\\\"enable_batch_run\\\":false,\\\"enable_run_restructure\\\":false,\\\"start_auxiliary_runs_before_parent_complete\\\":false,\\\"enable_code_generation\\\":false,\\\"iterations\\\":6,\\\"primary_metric\\\":\\\"AUC_weighted\\\",\\\"task_type\\\":\\\"classification\\\",\\\"data_script\\\":null,\\\"test_size\\\":0.0,\\\"validation_size\\\":0.0,\\\"n_cross_validations\\\":null,\\\"y_min\\\":null,\\\"y_max\\\":null,\\\"num_classes\\\":null,\\\"featurization\\\":\\\"auto\\\",\\\"_ignore_package_version_incompatibilities\\\":false,\\\"is_timeseries\\\":false,\\\"max_cores_per_iteration\\\":1,\\\"max_concurrent_iterations\\\":2,\\\"iteration_timeout_minutes\\\":null,\\\"mem_in_mb\\\":null,\\\"enforce_time_on_windows\\\":false,\\\"experiment_timeout_minutes\\\":8640,\\\"experiment_exit_score\\\":null,\\\"whitelist_models\\\":null,\\\"blacklist_algos\\\":[\\\"TensorFlowLinearClassifier\\\",\\\"TensorFlowDNN\\\"],\\\"supported_models\\\":[\\\"XGBoostClassifier\\\",\\\"SVM\\\",\\\"LogisticRegression\\\",\\\"GradientBoosting\\\",\\\"KNN\\\",\\\"LightGBM\\\",\\\"DecisionTree\\\",\\\"AveragedPerceptronClassifier\\\",\\\"BernoulliNaiveBayes\\\",\\\"ExtremeRandomTrees\\\",\\\"LinearSVM\\\",\\\"MultinomialNaiveBayes\\\",\\\"RandomForest\\\",\\\"SGD\\\",\\\"TensorFlowLinearClassifier\\\",\\\"TensorFlowDNN\\\"],\\\"private_models\\\":[],\\\"auto_blacklist\\\":true,\\\"blacklist_samples_reached\\\":false,\\\"exclude_nan_labels\\\":true,\\\"verbosity\\\":20,\\\"_debug_log\\\":\\\"azureml_automl.log\\\",\\\"show_warnings\\\":false,\\\"model_explainability\\\":true,\\\"service_url\\\":null,\\\"sdk_url\\\":null,\\\"sdk_packages\\\":null,\\\"enable_onnx_compatible_models\\\":false,\\\"enable_split_onnx_featurizer_estimator_models\\\":false,\\\"vm_type\\\":\\\"STANDARD_DS11_V2\\\",\\\"telemetry_verbosity\\\":20,\\\"send_telemetry\\\":true,\\\"enable_dnn\\\":false,\\\"scenario\\\":\\\"SDK-1.13.0\\\",\\\"environment_label\\\":null,\\\"save_mlflow\\\":false,\\\"force_text_dnn\\\":false,\\\"enable_feature_sweeping\\\":true,\\\"enable_early_stopping\\\":false,\\\"early_stopping_n_iters\\\":10,\\\"metrics\\\":null,\\\"enable_metric_confidence\\\":false,\\\"enable_ensembling\\\":true,\\\"enable_stack_ensembling\\\":true,\\\"ensemble_iterations\\\":6,\\\"enable_tf\\\":false,\\\"enable_subsampling\\\":false,\\\"subsample_seed\\\":null,\\\"enable_nimbusml\\\":false,\\\"enable_streaming\\\":false,\\\"force_streaming\\\":false,\\\"track_child_runs\\\":true,\\\"allowed_private_models\\\":[],\\\"label_column_name\\\":\\\"loan_status\\\",\\\"weight_column_name\\\":null,\\\"cv_split_column_names\\\":null,\\\"enable_local_managed\\\":false,\\\"_local_managed_run_id\\\":null,\\\"cost_mode\\\":1,\\\"lag_length\\\":0,\\\"metric_operation\\\":\\\"maximize\\\",\\\"preprocess\\\":true}\", \"DataPrepJsonString\": \"{\\\\\\\"training_data\\\\\\\": {\\\\\\\"datasetId\\\\\\\": \\\\\\\"4059c99b-771a-4bdd-aff1-fc3651196631\\\\\\\"}, \\\\\\\"validation_data\\\\\\\": {\\\\\\\"datasetId\\\\\\\": \\\\\\\"6ecb0aae-0bb9-4e46-83e3-fedfcded3434\\\\\\\"}, \\\\\\\"datasets\\\\\\\": 0}\", \"EnableSubsampling\": \"False\", \"runTemplate\": \"AutoML\", \"azureml.runsource\": \"automl\", \"display_task_type\": \"classification\", \"dependencies_versions\": \"{\\\"azureml-widgets\\\": \\\"1.30.0\\\", \\\"azureml-train\\\": \\\"1.30.0\\\", \\\"azureml-train-restclients-hyperdrive\\\": \\\"1.30.0\\\", \\\"azureml-train-core\\\": \\\"1.30.0\\\", \\\"azureml-train-automl\\\": \\\"1.30.0\\\", \\\"azureml-train-automl-runtime\\\": \\\"1.30.0\\\", \\\"azureml-train-automl-client\\\": \\\"1.30.0\\\", \\\"azureml-tensorboard\\\": \\\"1.30.0\\\", \\\"azureml-telemetry\\\": \\\"1.30.0\\\", \\\"azureml-sdk\\\": \\\"1.30.0\\\", \\\"azureml-samples\\\": \\\"0+unknown\\\", \\\"azureml-pipeline\\\": \\\"1.30.0\\\", \\\"azureml-pipeline-steps\\\": \\\"1.30.0\\\", \\\"azureml-pipeline-core\\\": \\\"1.30.0\\\", \\\"azureml-opendatasets\\\": \\\"1.30.0\\\", \\\"azureml-model-management-sdk\\\": \\\"1.0.1b6.post1\\\", \\\"azureml-mlflow\\\": \\\"1.30.0\\\", \\\"azureml-interpret\\\": \\\"1.32.0\\\", \\\"azureml-explain-model\\\": \\\"1.32.0\\\", \\\"azureml-defaults\\\": \\\"1.30.0\\\", \\\"azureml-dataset-runtime\\\": \\\"1.30.0\\\", \\\"azureml-dataprep\\\": \\\"2.15.1\\\", \\\"azureml-dataprep-rslex\\\": \\\"1.13.0\\\", \\\"azureml-dataprep-native\\\": \\\"33.0.0\\\", \\\"azureml-datadrift\\\": \\\"1.30.0\\\", \\\"azureml-core\\\": \\\"1.32.0\\\", \\\"azureml-contrib-services\\\": \\\"1.30.0\\\", \\\"azureml-contrib-server\\\": \\\"1.30.0\\\", \\\"azureml-contrib-reinforcementlearning\\\": \\\"1.30.0\\\", \\\"azureml-contrib-pipeline-steps\\\": \\\"1.30.0\\\", \\\"azureml-contrib-notebook\\\": \\\"1.30.0\\\", \\\"azureml-contrib-fairness\\\": \\\"1.32.0\\\", \\\"azureml-contrib-dataset\\\": \\\"1.30.0\\\", \\\"azureml-cli-common\\\": \\\"1.30.0\\\", \\\"azureml-automl-runtime\\\": \\\"1.30.0\\\", \\\"azureml-automl-dnn-nlp\\\": \\\"1.30.0\\\", \\\"azureml-automl-core\\\": \\\"1.30.0\\\", \\\"azureml-accel-models\\\": \\\"1.30.0\\\"}\", \"_aml_system_scenario_identification\": \"Remote.Parent\", \"ClientType\": \"SDK\", \"environment_cpu_name\": \"AzureML-AutoML\", \"environment_cpu_label\": \"prod\", \"environment_gpu_name\": \"AzureML-AutoML-GPU\", \"environment_gpu_label\": \"prod\", \"root_attribution\": \"automl\", \"attribution\": \"AutoML\", \"Orchestrator\": \"AutoML\", \"CancelUri\": \"https://centralindia.api.azureml.ms/jasmine/v1.0/subscriptions/23416925-66df-470c-b651-f378856d8ad7/resourceGroups/rohan-rg/providers/Microsoft.MachineLearningServices/workspaces/rohan-ws/experimentids/926e10e6-dadc-4009-a8ed-5e96cd895976/cancel/AutoML_929a79e2-031a-4f39-93e0-2bd14384ba50\", \"azureml.git.repository_uri\": \"https://github.com/rohanchauhan/azure-automl-fair-interpret-model.git\", \"mlflow.source.git.repoURL\": \"https://github.com/rohanchauhan/azure-automl-fair-interpret-model.git\", \"azureml.git.branch\": \"main\", \"mlflow.source.git.branch\": \"main\", \"azureml.git.commit\": \"2551c1fb1d1608865b495a99359afc61fa4af560\", \"mlflow.source.git.commit\": \"2551c1fb1d1608865b495a99359afc61fa4af560\", \"azureml.git.dirty\": \"True\", \"ClientSdkVersion\": \"1.31.0\", \"snapshotId\": \"00000000-0000-0000-0000-000000000000\", \"SetupRunId\": \"AutoML_929a79e2-031a-4f39-93e0-2bd14384ba50_setup\", \"SetupRunContainerId\": \"dcid.AutoML_929a79e2-031a-4f39-93e0-2bd14384ba50_setup\", \"FeaturizationRunJsonPath\": \"featurizer_container.json\", \"FeaturizationRunId\": \"AutoML_929a79e2-031a-4f39-93e0-2bd14384ba50_featurize\", \"ProblemInfoJsonString\": \"{\\\"dataset_num_categorical\\\": 0, \\\"is_sparse\\\": true, \\\"subsampling\\\": false, \\\"has_extra_col\\\": true, \\\"dataset_classes\\\": 2, \\\"dataset_features\\\": 55, \\\"dataset_samples\\\": 22852, \\\"single_frequency_class_detected\\\": false}\", \"ModelExplainRunId\": \"AutoML_929a79e2-031a-4f39-93e0-2bd14384ba50_ModelExplain\"}, \"tags\": {\"model_explain_run\": \"best_run\", \"_aml_system_azureml.automlComponent\": \"AutoML\", \"pipeline_id\": \"\", \"score\": \"\", \"predicted_cost\": \"\", \"fit_time\": \"\", \"training_percent\": \"\", \"iteration\": \"\", \"run_preprocessor\": \"\", \"run_algorithm\": \"\", \"automl_best_child_run_id\": \"AutoML_929a79e2-031a-4f39-93e0-2bd14384ba50_0\", \"model_explain_best_run_child_id\": \"AutoML_929a79e2-031a-4f39-93e0-2bd14384ba50_0\"}, \"end_time_utc\": \"2021-07-07T04:27:30.25266Z\", \"status\": \"Completed\", \"log_files\": {}, \"log_groups\": [], \"run_duration\": \"0:11:21\", \"run_number\": \"19\", \"run_queued_details\": {\"status\": \"Completed\", \"details\": null}}, \"child_runs\": [{\"run_id\": \"AutoML_929a79e2-031a-4f39-93e0-2bd14384ba50_0\", \"run_number\": 23, \"metric\": null, \"status\": \"Completed\", \"run_type\": \"azureml.scriptrun\", \"training_percent\": \"100\", \"start_time\": \"2021-07-07T04:22:49.429391Z\", \"end_time\": \"2021-07-07T04:23:26.493272Z\", \"created_time\": \"2021-07-07T04:22:34.291639Z\", \"created_time_dt\": \"2021-07-07T04:22:34.291639Z\", \"duration\": \"0:00:52\", \"iteration\": \"0\", \"goal\": \"AUC_weighted_max\", \"run_name\": \"MaxAbsScaler, LightGBM\", \"run_properties\": \"copy=True\", \"primary_metric\": 0.948568, \"best_metric\": 0.948568}, {\"run_id\": \"AutoML_929a79e2-031a-4f39-93e0-2bd14384ba50_1\", \"run_number\": 24, \"metric\": null, \"status\": \"Completed\", \"run_type\": \"azureml.scriptrun\", \"training_percent\": \"100\", \"start_time\": \"2021-07-07T04:23:38.549856Z\", \"end_time\": \"2021-07-07T04:24:13.944976Z\", \"created_time\": \"2021-07-07T04:22:34.364959Z\", \"created_time_dt\": \"2021-07-07T04:22:34.364959Z\", \"duration\": \"0:01:39\", \"iteration\": \"1\", \"goal\": \"AUC_weighted_max\", \"run_name\": \"MaxAbsScaler, XGBoostClassifier\", \"run_properties\": \"copy=True\", \"primary_metric\": 0.92926943, \"best_metric\": 0.948568}, {\"run_id\": \"AutoML_929a79e2-031a-4f39-93e0-2bd14384ba50_2\", \"run_number\": 25, \"metric\": null, \"status\": \"Completed\", \"run_type\": \"azureml.scriptrun\", \"training_percent\": \"100\", \"start_time\": \"2021-07-07T04:24:29.513535Z\", \"end_time\": \"2021-07-07T04:25:00.909405Z\", \"created_time\": \"2021-07-07T04:23:27.603486Z\", \"created_time_dt\": \"2021-07-07T04:23:27.603486Z\", \"duration\": \"0:01:33\", \"iteration\": \"2\", \"goal\": \"AUC_weighted_max\", \"run_name\": \"MaxAbsScaler, RandomForest\", \"run_properties\": \"copy=True\", \"primary_metric\": 0.89432022, \"best_metric\": 0.948568}, {\"run_id\": \"AutoML_929a79e2-031a-4f39-93e0-2bd14384ba50_3\", \"run_number\": 26, \"metric\": null, \"status\": \"Completed\", \"run_type\": \"azureml.scriptrun\", \"training_percent\": \"100\", \"start_time\": \"2021-07-07T04:24:51.045553Z\", \"end_time\": \"2021-07-07T04:26:35.434527Z\", \"created_time\": \"2021-07-07T04:24:15.040166Z\", \"created_time_dt\": \"2021-07-07T04:24:15.040166Z\", \"duration\": \"0:02:20\", \"iteration\": \"3\", \"goal\": \"AUC_weighted_max\", \"run_name\": \"MaxAbsScaler, RandomForest\", \"run_properties\": \"copy=True\", \"primary_metric\": 0.89011199, \"best_metric\": 0.948568}, {\"run_id\": \"AutoML_929a79e2-031a-4f39-93e0-2bd14384ba50_4\", \"run_number\": 27, \"metric\": null, \"status\": \"Completed\", \"run_type\": \"azureml.scriptrun\", \"training_percent\": \"100\", \"start_time\": \"2021-07-07T04:26:51.601519Z\", \"end_time\": \"2021-07-07T04:27:28.820214Z\", \"created_time\": \"2021-07-07T04:26:36.255358Z\", \"created_time_dt\": \"2021-07-07T04:26:36.255358Z\", \"duration\": \"0:00:52\", \"iteration\": \"4\", \"goal\": \"AUC_weighted_max\", \"run_name\": \"VotingEnsemble\", \"run_properties\": \"\\n    estimators=[('0', Pipeline(memory=None,\\n             steps=[('maxabsscaler', MaxAbsScaler(copy=True\", \"primary_metric\": 0.94714547, \"best_metric\": 0.948568}, {\"run_id\": \"AutoML_929a79e2-031a-4f39-93e0-2bd14384ba50_5\", \"run_number\": 28, \"metric\": null, \"status\": \"Completed\", \"run_type\": \"azureml.scriptrun\", \"training_percent\": \"100\", \"start_time\": \"2021-07-07T04:26:47.333941Z\", \"end_time\": \"2021-07-07T04:27:28.851024Z\", \"created_time\": \"2021-07-07T04:26:36.264917Z\", \"created_time_dt\": \"2021-07-07T04:26:36.264917Z\", \"duration\": \"0:00:52\", \"iteration\": \"5\", \"goal\": \"AUC_weighted_max\", \"run_name\": \"StackEnsemble\", \"run_properties\": \"\\n    base_learners=[('0', Pipeline(memory=None,\\n             steps=[('maxabsscaler', MaxAbsScaler(copy=True\", \"primary_metric\": 0.94774509, \"best_metric\": 0.948568}], \"children_metrics\": {\"categories\": [0], \"series\": {\"AUC_weighted\": [{\"categories\": [\"0\", \"1\", \"2\", \"3\", \"4\", \"5\"], \"mode\": \"markers\", \"name\": \"AUC_weighted\", \"stepped\": false, \"type\": \"scatter\", \"data\": [0.948567998793658, 0.9292694279597122, 0.8943202239209597, 0.8901119854042615, 0.9471454688656648, 0.9477450880205776]}, {\"categories\": [\"0\", \"1\", \"2\", \"3\", \"4\", \"5\"], \"mode\": \"lines\", \"name\": \"AUC_weighted_max\", \"stepped\": true, \"type\": \"scatter\", \"data\": [0.948567998793658, 0.948567998793658, 0.948567998793658, 0.948567998793658, 0.948567998793658, 0.948567998793658]}], \"average_precision_score_macro\": [{\"categories\": [\"0\", \"1\", \"2\", \"3\", \"4\", \"5\"], \"mode\": \"markers\", \"name\": \"average_precision_score_macro\", \"stepped\": false, \"type\": \"scatter\", \"data\": [0.942607227596187, 0.9238691259626512, 0.8775112819151936, 0.8720256413267404, 0.9412894965647096, 0.9418595293718146]}, {\"categories\": [\"0\", \"1\", \"2\", \"3\", \"4\", \"5\"], \"mode\": \"lines\", \"name\": \"average_precision_score_macro_max\", \"stepped\": true, \"type\": \"scatter\", \"data\": [0.942607227596187, 0.942607227596187, 0.942607227596187, 0.942607227596187, 0.942607227596187, 0.942607227596187]}], \"AUC_micro\": [{\"categories\": [\"0\", \"1\", \"2\", \"3\", \"4\", \"5\"], \"mode\": \"markers\", \"name\": \"AUC_micro\", \"stepped\": false, \"type\": \"scatter\", \"data\": [0.9771106683802441, 0.9649003885659053, 0.935308194447997, 0.9049262667587541, 0.9757094303629174, 0.9775099354285492]}, {\"categories\": [\"0\", \"1\", \"2\", \"3\", \"4\", \"5\"], \"mode\": \"lines\", \"name\": \"AUC_micro_max\", \"stepped\": true, \"type\": \"scatter\", \"data\": [0.9771106683802441, 0.9771106683802441, 0.9771106683802441, 0.9771106683802441, 0.9771106683802441, 0.9775099354285492]}], \"norm_macro_recall\": [{\"categories\": [\"0\", \"1\", \"2\", \"3\", \"4\", \"5\"], \"mode\": \"markers\", \"name\": \"norm_macro_recall\", \"stepped\": false, \"type\": \"scatter\", \"data\": [0.722218123540364, 0.6799631990987329, 0.45766737368928734, 0.6255145022718607, 0.7201051561140841, 0.7298157711739153]}, {\"categories\": [\"0\", \"1\", \"2\", \"3\", \"4\", \"5\"], \"mode\": \"lines\", \"name\": \"norm_macro_recall_max\", \"stepped\": true, \"type\": \"scatter\", \"data\": [0.722218123540364, 0.722218123540364, 0.722218123540364, 0.722218123540364, 0.722218123540364, 0.7298157711739153]}], \"balanced_accuracy\": [{\"categories\": [\"0\", \"1\", \"2\", \"3\", \"4\", \"5\"], \"mode\": \"markers\", \"name\": \"balanced_accuracy\", \"stepped\": false, \"type\": \"scatter\", \"data\": [0.861109061770182, 0.8399815995493665, 0.7288336868446437, 0.8127572511359303, 0.860052578057042, 0.8649078855869576]}, {\"categories\": [\"0\", \"1\", \"2\", \"3\", \"4\", \"5\"], \"mode\": \"lines\", \"name\": \"balanced_accuracy_max\", \"stepped\": true, \"type\": \"scatter\", \"data\": [0.861109061770182, 0.861109061770182, 0.861109061770182, 0.861109061770182, 0.861109061770182, 0.8649078855869576]}], \"precision_score_macro\": [{\"categories\": [\"0\", \"1\", \"2\", \"3\", \"4\", \"5\"], \"mode\": \"markers\", \"name\": \"precision_score_macro\", \"stepped\": false, \"type\": \"scatter\", \"data\": [0.9557034149373274, 0.9303863553001589, 0.8896879666912068, 0.7549245738222117, 0.9560329165752492, 0.9482354107284456]}, {\"categories\": [\"0\", \"1\", \"2\", \"3\", \"4\", \"5\"], \"mode\": \"lines\", \"name\": \"precision_score_macro_max\", \"stepped\": true, \"type\": \"scatter\", \"data\": [0.9557034149373274, 0.9557034149373274, 0.9557034149373274, 0.9557034149373274, 0.9560329165752492, 0.9560329165752492]}], \"f1_score_micro\": [{\"categories\": [\"0\", \"1\", \"2\", \"3\", \"4\", \"5\"], \"mode\": \"markers\", \"name\": \"f1_score_micro\", \"stepped\": false, \"type\": \"scatter\", \"data\": [0.937814780552986, 0.9238359543632441, 0.8752184191592147, 0.8283482372289033, 0.9375064240929181, 0.9373008531195395]}, {\"categories\": [\"0\", \"1\", \"2\", \"3\", \"4\", \"5\"], \"mode\": \"lines\", \"name\": \"f1_score_micro_max\", \"stepped\": true, \"type\": \"scatter\", \"data\": [0.937814780552986, 0.937814780552986, 0.937814780552986, 0.937814780552986, 0.937814780552986, 0.937814780552986]}], \"accuracy\": [{\"categories\": [\"0\", \"1\", \"2\", \"3\", \"4\", \"5\"], \"mode\": \"markers\", \"name\": \"accuracy\", \"stepped\": false, \"type\": \"scatter\", \"data\": [0.937814780552986, 0.923835954363244, 0.8752184191592147, 0.8283482372289033, 0.9375064240929181, 0.9373008531195395]}, {\"categories\": [\"0\", \"1\", \"2\", \"3\", \"4\", \"5\"], \"mode\": \"lines\", \"name\": \"accuracy_max\", \"stepped\": true, \"type\": \"scatter\", \"data\": [0.937814780552986, 0.937814780552986, 0.937814780552986, 0.937814780552986, 0.937814780552986, 0.937814780552986]}], \"log_loss\": [{\"categories\": [\"0\", \"1\", \"2\", \"3\", \"4\", \"5\"], \"mode\": \"markers\", \"name\": \"log_loss\", \"stepped\": false, \"type\": \"scatter\", \"data\": [0.18762578108432748, 0.23308193816568437, 0.34262550989910745, 0.4873404458904302, 0.192899912175662, 0.19525249614687656]}, {\"categories\": [\"0\", \"1\", \"2\", \"3\", \"4\", \"5\"], \"mode\": \"lines\", \"name\": \"log_loss_min\", \"stepped\": true, \"type\": \"scatter\", \"data\": [0.18762578108432748, 0.18762578108432748, 0.18762578108432748, 0.18762578108432748, 0.18762578108432748, 0.18762578108432748]}], \"AUC_macro\": [{\"categories\": [\"0\", \"1\", \"2\", \"3\", \"4\", \"5\"], \"mode\": \"markers\", \"name\": \"AUC_macro\", \"stepped\": false, \"type\": \"scatter\", \"data\": [0.9485679987936582, 0.9292694279597122, 0.8943202239209597, 0.8901119854042616, 0.9471454688656649, 0.9477450880205776]}, {\"categories\": [\"0\", \"1\", \"2\", \"3\", \"4\", \"5\"], \"mode\": \"lines\", \"name\": \"AUC_macro_max\", \"stepped\": true, \"type\": \"scatter\", \"data\": [0.9485679987936582, 0.9485679987936582, 0.9485679987936582, 0.9485679987936582, 0.9485679987936582, 0.9485679987936582]}], \"precision_score_micro\": [{\"categories\": [\"0\", \"1\", \"2\", \"3\", \"4\", \"5\"], \"mode\": \"markers\", \"name\": \"precision_score_micro\", \"stepped\": false, \"type\": \"scatter\", \"data\": [0.937814780552986, 0.923835954363244, 0.8752184191592147, 0.8283482372289033, 0.9375064240929181, 0.9373008531195395]}, {\"categories\": [\"0\", \"1\", \"2\", \"3\", \"4\", \"5\"], \"mode\": \"lines\", \"name\": \"precision_score_micro_max\", \"stepped\": true, \"type\": \"scatter\", \"data\": [0.937814780552986, 0.937814780552986, 0.937814780552986, 0.937814780552986, 0.937814780552986, 0.937814780552986]}], \"recall_score_micro\": [{\"categories\": [\"0\", \"1\", \"2\", \"3\", \"4\", \"5\"], \"mode\": \"markers\", \"name\": \"recall_score_micro\", \"stepped\": false, \"type\": \"scatter\", \"data\": [0.937814780552986, 0.923835954363244, 0.8752184191592147, 0.8283482372289033, 0.9375064240929181, 0.9373008531195395]}, {\"categories\": [\"0\", \"1\", \"2\", \"3\", \"4\", \"5\"], \"mode\": \"lines\", \"name\": \"recall_score_micro_max\", \"stepped\": true, \"type\": \"scatter\", \"data\": [0.937814780552986, 0.937814780552986, 0.937814780552986, 0.937814780552986, 0.937814780552986, 0.937814780552986]}], \"matthews_correlation\": [{\"categories\": [\"0\", \"1\", \"2\", \"3\", \"4\", \"5\"], \"mode\": \"markers\", \"name\": \"matthews_correlation\", \"stepped\": false, \"type\": \"scatter\", \"data\": [0.8113165414645166, 0.7650449437756452, 0.5972394298334346, 0.5647282849499693, 0.8104216860173239, 0.8088624999939571]}, {\"categories\": [\"0\", \"1\", \"2\", \"3\", \"4\", \"5\"], \"mode\": \"lines\", \"name\": \"matthews_correlation_max\", \"stepped\": true, \"type\": \"scatter\", \"data\": [0.8113165414645166, 0.8113165414645166, 0.8113165414645166, 0.8113165414645166, 0.8113165414645166, 0.8113165414645166]}], \"precision_score_weighted\": [{\"categories\": [\"0\", \"1\", \"2\", \"3\", \"4\", \"5\"], \"mode\": \"markers\", \"name\": \"precision_score_weighted\", \"stepped\": false, \"type\": \"scatter\", \"data\": [0.9407831530108983, 0.9249327932590012, 0.8791066187610274, 0.8565611924180309, 0.9406132646358757, 0.9389668155136471]}, {\"categories\": [\"0\", \"1\", \"2\", \"3\", \"4\", \"5\"], \"mode\": \"lines\", \"name\": \"precision_score_weighted_max\", \"stepped\": true, \"type\": \"scatter\", \"data\": [0.9407831530108983, 0.9407831530108983, 0.9407831530108983, 0.9407831530108983, 0.9407831530108983, 0.9407831530108983]}], \"weighted_accuracy\": [{\"categories\": [\"0\", \"1\", \"2\", \"3\", \"4\", \"5\"], \"mode\": \"markers\", \"name\": \"weighted_accuracy\", \"stepped\": false, \"type\": \"scatter\", \"data\": [0.9771716886334301, 0.9668607533863721, 0.9503269057949799, 0.8363478103543711, 0.9772471885011415, 0.9744449333010701]}, {\"categories\": [\"0\", \"1\", \"2\", \"3\", \"4\", \"5\"], \"mode\": \"lines\", \"name\": \"weighted_accuracy_max\", \"stepped\": true, \"type\": \"scatter\", \"data\": [0.9771716886334301, 0.9771716886334301, 0.9771716886334301, 0.9771716886334301, 0.9772471885011415, 0.9772471885011415]}], \"f1_score_macro\": [{\"categories\": [\"0\", \"1\", \"2\", \"3\", \"4\", \"5\"], \"mode\": \"markers\", \"name\": \"f1_score_macro\", \"stepped\": false, \"type\": \"scatter\", \"data\": [0.8982230971041926, 0.8751870954215433, 0.7727488117372149, 0.7745367516877587, 0.89756786646269, 0.8985058389810472]}, {\"categories\": [\"0\", \"1\", \"2\", \"3\", \"4\", \"5\"], \"mode\": \"lines\", \"name\": \"f1_score_macro_max\", \"stepped\": true, \"type\": \"scatter\", \"data\": [0.8982230971041926, 0.8982230971041926, 0.8982230971041926, 0.8982230971041926, 0.8982230971041926, 0.8985058389810472]}], \"average_precision_score_weighted\": [{\"categories\": [\"0\", \"1\", \"2\", \"3\", \"4\", \"5\"], \"mode\": \"markers\", \"name\": \"average_precision_score_weighted\", \"stepped\": false, \"type\": \"scatter\", \"data\": [0.9652968861261935, 0.9529856458648004, 0.9240709861289793, 0.9216307371261546, 0.9644282675482939, 0.9648003293011259]}, {\"categories\": [\"0\", \"1\", \"2\", \"3\", \"4\", \"5\"], \"mode\": \"lines\", \"name\": \"average_precision_score_weighted_max\", \"stepped\": true, \"type\": \"scatter\", \"data\": [0.9652968861261935, 0.9652968861261935, 0.9652968861261935, 0.9652968861261935, 0.9652968861261935, 0.9652968861261935]}], \"recall_score_macro\": [{\"categories\": [\"0\", \"1\", \"2\", \"3\", \"4\", \"5\"], \"mode\": \"markers\", \"name\": \"recall_score_macro\", \"stepped\": false, \"type\": \"scatter\", \"data\": [0.861109061770182, 0.8399815995493665, 0.7288336868446437, 0.8127572511359303, 0.860052578057042, 0.8649078855869576]}, {\"categories\": [\"0\", \"1\", \"2\", \"3\", \"4\", \"5\"], \"mode\": \"lines\", \"name\": \"recall_score_macro_max\", \"stepped\": true, \"type\": \"scatter\", \"data\": [0.861109061770182, 0.861109061770182, 0.861109061770182, 0.861109061770182, 0.861109061770182, 0.8649078855869576]}], \"recall_score_weighted\": [{\"categories\": [\"0\", \"1\", \"2\", \"3\", \"4\", \"5\"], \"mode\": \"markers\", \"name\": \"recall_score_weighted\", \"stepped\": false, \"type\": \"scatter\", \"data\": [0.937814780552986, 0.923835954363244, 0.8752184191592147, 0.8283482372289033, 0.9375064240929181, 0.9373008531195395]}, {\"categories\": [\"0\", \"1\", \"2\", \"3\", \"4\", \"5\"], \"mode\": \"lines\", \"name\": \"recall_score_weighted_max\", \"stepped\": true, \"type\": \"scatter\", \"data\": [0.937814780552986, 0.937814780552986, 0.937814780552986, 0.937814780552986, 0.937814780552986, 0.937814780552986]}], \"average_precision_score_micro\": [{\"categories\": [\"0\", \"1\", \"2\", \"3\", \"4\", \"5\"], \"mode\": \"markers\", \"name\": \"average_precision_score_micro\", \"stepped\": false, \"type\": \"scatter\", \"data\": [0.9773617221992242, 0.964631387863947, 0.9315115007953562, 0.9049188475912693, 0.9758468278533268, 0.9777652552222957]}, {\"categories\": [\"0\", \"1\", \"2\", \"3\", \"4\", \"5\"], \"mode\": \"lines\", \"name\": \"average_precision_score_micro_max\", \"stepped\": true, \"type\": \"scatter\", \"data\": [0.9773617221992242, 0.9773617221992242, 0.9773617221992242, 0.9773617221992242, 0.9773617221992242, 0.9777652552222957]}], \"f1_score_weighted\": [{\"categories\": [\"0\", \"1\", \"2\", \"3\", \"4\", \"5\"], \"mode\": \"markers\", \"name\": \"f1_score_weighted\", \"stepped\": false, \"type\": \"scatter\", \"data\": [0.934232737999692, 0.9193907589874382, 0.8593139063892915, 0.8370205700554373, 0.9338511421106289, 0.9341017962595738]}, {\"categories\": [\"0\", \"1\", \"2\", \"3\", \"4\", \"5\"], \"mode\": \"lines\", \"name\": \"f1_score_weighted_max\", \"stepped\": true, \"type\": \"scatter\", \"data\": [0.934232737999692, 0.934232737999692, 0.934232737999692, 0.934232737999692, 0.934232737999692, 0.934232737999692]}]}, \"metricName\": null, \"primaryMetricName\": \"AUC_weighted\", \"showLegend\": false}, \"run_metrics\": [{\"name\": \"experiment_status\", \"run_id\": \"AutoML_929a79e2-031a-4f39-93e0-2bd14384ba50\", \"categories\": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12], \"series\": [{\"data\": [\"DatasetEvaluation\", \"FeaturesGeneration\", \"DatasetFeaturization\", \"DatasetFeaturizationCompleted\", \"ModelSelection\", \"BestRunExplainModel\", \"ModelExplanationDataSetSetup\", \"PickSurrogateModel\", \"EngineeredFeatureExplanations\", \"EngineeredFeatureExplanations\", \"RawFeaturesExplanations\", \"RawFeaturesExplanations\", \"BestRunExplainModel\"]}]}, {\"name\": \"experiment_status_description\", \"run_id\": \"AutoML_929a79e2-031a-4f39-93e0-2bd14384ba50\", \"categories\": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12], \"series\": [{\"data\": [\"Gathering dataset statistics.\", \"Generating features for the dataset.\", \"Beginning to fit featurizers and featurize the dataset.\", \"Completed fit featurizers and featurizing the dataset.\", \"Beginning model selection.\", \"Best run model explanations started\", \"Model explanations data setup completed\", \"Choosing LightGBM as the surrogate model for explanations\", \"Computation of engineered features started\", \"Computation of engineered features completed\", \"Computation of raw features started\", \"Computation of raw features completed\", \"Best run model explanations completed\"]}]}, {\"name\": \"matthews_correlation\", \"run_id\": \"AutoML_929a79e2-031a-4f39-93e0-2bd14384ba50\", \"categories\": [0], \"series\": [{\"data\": [0.8113165414645166]}]}, {\"name\": \"accuracy\", \"run_id\": \"AutoML_929a79e2-031a-4f39-93e0-2bd14384ba50\", \"categories\": [0], \"series\": [{\"data\": [0.937814780552986]}]}, {\"name\": \"log_loss\", \"run_id\": \"AutoML_929a79e2-031a-4f39-93e0-2bd14384ba50\", \"categories\": [0], \"series\": [{\"data\": [0.18762578108432748]}]}, {\"name\": \"precision_score_weighted\", \"run_id\": \"AutoML_929a79e2-031a-4f39-93e0-2bd14384ba50\", \"categories\": [0], \"series\": [{\"data\": [0.9407831530108983]}]}, {\"name\": \"recall_score_micro\", \"run_id\": \"AutoML_929a79e2-031a-4f39-93e0-2bd14384ba50\", \"categories\": [0], \"series\": [{\"data\": [0.937814780552986]}]}, {\"name\": \"recall_score_macro\", \"run_id\": \"AutoML_929a79e2-031a-4f39-93e0-2bd14384ba50\", \"categories\": [0], \"series\": [{\"data\": [0.861109061770182]}]}, {\"name\": \"average_precision_score_micro\", \"run_id\": \"AutoML_929a79e2-031a-4f39-93e0-2bd14384ba50\", \"categories\": [0], \"series\": [{\"data\": [0.9773617221992242]}]}, {\"name\": \"f1_score_weighted\", \"run_id\": \"AutoML_929a79e2-031a-4f39-93e0-2bd14384ba50\", \"categories\": [0], \"series\": [{\"data\": [0.934232737999692]}]}, {\"name\": \"balanced_accuracy\", \"run_id\": \"AutoML_929a79e2-031a-4f39-93e0-2bd14384ba50\", \"categories\": [0], \"series\": [{\"data\": [0.861109061770182]}]}, {\"name\": \"AUC_micro\", \"run_id\": \"AutoML_929a79e2-031a-4f39-93e0-2bd14384ba50\", \"categories\": [0], \"series\": [{\"data\": [0.9771106683802441]}]}, {\"name\": \"f1_score_micro\", \"run_id\": \"AutoML_929a79e2-031a-4f39-93e0-2bd14384ba50\", \"categories\": [0], \"series\": [{\"data\": [0.937814780552986]}]}, {\"name\": \"recall_score_weighted\", \"run_id\": \"AutoML_929a79e2-031a-4f39-93e0-2bd14384ba50\", \"categories\": [0], \"series\": [{\"data\": [0.937814780552986]}]}, {\"name\": \"weighted_accuracy\", \"run_id\": \"AutoML_929a79e2-031a-4f39-93e0-2bd14384ba50\", \"categories\": [0], \"series\": [{\"data\": [0.9771716886334301]}]}, {\"name\": \"average_precision_score_weighted\", \"run_id\": \"AutoML_929a79e2-031a-4f39-93e0-2bd14384ba50\", \"categories\": [0], \"series\": [{\"data\": [0.9652968861261935]}]}, {\"name\": \"f1_score_macro\", \"run_id\": \"AutoML_929a79e2-031a-4f39-93e0-2bd14384ba50\", \"categories\": [0], \"series\": [{\"data\": [0.8982230971041926]}]}, {\"name\": \"precision_score_micro\", \"run_id\": \"AutoML_929a79e2-031a-4f39-93e0-2bd14384ba50\", \"categories\": [0], \"series\": [{\"data\": [0.937814780552986]}]}, {\"name\": \"AUC_weighted\", \"run_id\": \"AutoML_929a79e2-031a-4f39-93e0-2bd14384ba50\", \"categories\": [0], \"series\": [{\"data\": [0.948567998793658]}]}, {\"name\": \"AUC_macro\", \"run_id\": \"AutoML_929a79e2-031a-4f39-93e0-2bd14384ba50\", \"categories\": [0], \"series\": [{\"data\": [0.9485679987936582]}]}, {\"name\": \"average_precision_score_macro\", \"run_id\": \"AutoML_929a79e2-031a-4f39-93e0-2bd14384ba50\", \"categories\": [0], \"series\": [{\"data\": [0.942607227596187]}]}, {\"name\": \"norm_macro_recall\", \"run_id\": \"AutoML_929a79e2-031a-4f39-93e0-2bd14384ba50\", \"categories\": [0], \"series\": [{\"data\": [0.722218123540364]}]}, {\"name\": \"precision_score_macro\", \"run_id\": \"AutoML_929a79e2-031a-4f39-93e0-2bd14384ba50\", \"categories\": [0], \"series\": [{\"data\": [0.9557034149373274]}]}], \"run_logs\": \"\\nRun is completed.\", \"graph\": {}, \"widget_settings\": {\"childWidgetDisplay\": \"popup\", \"send_telemetry\": false, \"log_level\": \"INFO\", \"sdk_version\": \"1.32.0\"}, \"loading\": false}"
          },
          "metadata": {}
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": "<IPython.core.display.HTML object>",
            "text/html": "<table style=\"width:100%\"><tr><th>Experiment</th><th>Id</th><th>Type</th><th>Status</th><th>Details Page</th><th>Docs Page</th></tr><tr><td>azure-automl-fair-interpret-model</td><td>AutoML_929a79e2-031a-4f39-93e0-2bd14384ba50</td><td>automl</td><td>NotStarted</td><td><a href=\"https://ml.azure.com/runs/AutoML_929a79e2-031a-4f39-93e0-2bd14384ba50?wsid=/subscriptions/23416925-66df-470c-b651-f378856d8ad7/resourcegroups/rohan-rg/workspaces/rohan-ws&amp;tid=13715ad3-e049-4909-899b-f9e22f99b1a5\" target=\"_blank\" rel=\"noopener\">Link to Azure Machine Learning studio</a></td><td><a href=\"https://docs.microsoft.com/en-us/python/api/overview/azure/ml/intro?view=azure-ml-py\" target=\"_blank\" rel=\"noopener\">Link to Documentation</a></td></tr></table>"
          },
          "metadata": {}
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\n",
            "Current status: FeaturesGeneration. Generating features for the dataset.\n",
            "Current status: DatasetFeaturization. Beginning to fit featurizers and featurize the dataset.\n",
            "Current status: ModelSelection. Beginning model selection.\n",
            "\n",
            "****************************************************************************************************\n",
            "DATA GUARDRAILS: \n",
            "\n",
            "TYPE:         Class balancing detection\n",
            "STATUS:       PASSED\n",
            "DESCRIPTION:  Your inputs were analyzed, and all classes are balanced in your training data.\n",
            "              Learn more about imbalanced data: https://aka.ms/AutomatedMLImbalancedData\n",
            "\n",
            "****************************************************************************************************\n",
            "\n",
            "TYPE:         Missing feature values imputation\n",
            "STATUS:       DONE\n",
            "DESCRIPTION:  If the missing values are expected, let the run complete. Otherwise cancel the current run and use a script to customize the handling of missing feature values that may be more appropriate based on the data type and business requirement.\n",
            "              Learn more about missing value imputation: https://aka.ms/AutomatedMLFeaturization\n",
            "DETAILS:      \n",
            "+---------------------------------+---------------------------------+---------------------------------+\n",
            "|Column name                      |Missing value count              |Imputation type                  |\n",
            "+=================================+=================================+=================================+\n",
            "|person_emp_length                |616                              |mean                             |\n",
            "|loan_int_rate                    |2178                             |mean                             |\n",
            "+---------------------------------+---------------------------------+---------------------------------+\n",
            "\n",
            "****************************************************************************************************\n",
            "\n",
            "TYPE:         High cardinality feature detection\n",
            "STATUS:       PASSED\n",
            "DESCRIPTION:  Your inputs were analyzed, and no high cardinality features were detected.\n",
            "              Learn more about high cardinality feature handling: https://aka.ms/AutomatedMLFeaturization\n",
            "\n",
            "****************************************************************************************************\n",
            "\n",
            "****************************************************************************************************\n",
            "ITERATION: The iteration being evaluated.\n",
            "PIPELINE: A summary description of the pipeline being evaluated.\n",
            "DURATION: Time taken for the current iteration.\n",
            "METRIC: The result of computing score on the fitted pipeline.\n",
            "BEST: The best observed score thus far.\n",
            "****************************************************************************************************\n",
            "\n",
            " ITERATION   PIPELINE                                       DURATION      METRIC      BEST\n",
            "         0   MaxAbsScaler LightGBM                          0:00:37       0.9486    0.9486\n",
            "         1   MaxAbsScaler XGBoostClassifier                 0:00:35       0.9293    0.9486\n",
            "         2   MaxAbsScaler RandomForest                      0:00:31       0.8943    0.9486\n",
            "         3   MaxAbsScaler RandomForest                      0:01:44       0.8901    0.9486\n",
            "         4    VotingEnsemble                                0:00:37       0.9471    0.9486\n",
            "         5    StackEnsemble                                 0:00:42       0.9477    0.9486\n"
          ]
        },
        {
          "output_type": "execute_result",
          "execution_count": 12,
          "data": {
            "text/plain": "{'runId': 'AutoML_929a79e2-031a-4f39-93e0-2bd14384ba50',\n 'target': 'rohan-vm-cluster',\n 'status': 'Completed',\n 'startTimeUtc': '2021-07-07T04:16:24.028287Z',\n 'endTimeUtc': '2021-07-07T04:27:30.25266Z',\n 'properties': {'num_iterations': '6',\n  'training_type': 'TrainFull',\n  'acquisition_function': 'EI',\n  'primary_metric': 'AUC_weighted',\n  'train_split': '0',\n  'acquisition_parameter': '0',\n  'num_cross_validation': None,\n  'target': 'rohan-vm-cluster',\n  'AMLSettingsJsonString': '{\"path\":null,\"name\":\"Automated Credit Risk Modelling\",\"subscription_id\":\"23416925-66df-470c-b651-f378856d8ad7\",\"resource_group\":\"rohan-rg\",\"workspace_name\":\"rohan-ws\",\"region\":\"centralindia\",\"compute_target\":\"rohan-vm-cluster\",\"spark_service\":null,\"azure_service\":\"remote\",\"many_models\":false,\"pipeline_fetch_max_batch_size\":1,\"enable_batch_run\":false,\"enable_run_restructure\":false,\"start_auxiliary_runs_before_parent_complete\":false,\"enable_code_generation\":false,\"iterations\":6,\"primary_metric\":\"AUC_weighted\",\"task_type\":\"classification\",\"data_script\":null,\"test_size\":0.0,\"validation_size\":0.0,\"n_cross_validations\":null,\"y_min\":null,\"y_max\":null,\"num_classes\":null,\"featurization\":\"auto\",\"_ignore_package_version_incompatibilities\":false,\"is_timeseries\":false,\"max_cores_per_iteration\":1,\"max_concurrent_iterations\":2,\"iteration_timeout_minutes\":null,\"mem_in_mb\":null,\"enforce_time_on_windows\":false,\"experiment_timeout_minutes\":8640,\"experiment_exit_score\":null,\"whitelist_models\":null,\"blacklist_algos\":[\"TensorFlowLinearClassifier\",\"TensorFlowDNN\"],\"supported_models\":[\"XGBoostClassifier\",\"SVM\",\"LogisticRegression\",\"GradientBoosting\",\"KNN\",\"LightGBM\",\"DecisionTree\",\"AveragedPerceptronClassifier\",\"BernoulliNaiveBayes\",\"ExtremeRandomTrees\",\"LinearSVM\",\"MultinomialNaiveBayes\",\"RandomForest\",\"SGD\",\"TensorFlowLinearClassifier\",\"TensorFlowDNN\"],\"private_models\":[],\"auto_blacklist\":true,\"blacklist_samples_reached\":false,\"exclude_nan_labels\":true,\"verbosity\":20,\"_debug_log\":\"azureml_automl.log\",\"show_warnings\":false,\"model_explainability\":true,\"service_url\":null,\"sdk_url\":null,\"sdk_packages\":null,\"enable_onnx_compatible_models\":false,\"enable_split_onnx_featurizer_estimator_models\":false,\"vm_type\":\"STANDARD_DS11_V2\",\"telemetry_verbosity\":20,\"send_telemetry\":true,\"enable_dnn\":false,\"scenario\":\"SDK-1.13.0\",\"environment_label\":null,\"save_mlflow\":false,\"force_text_dnn\":false,\"enable_feature_sweeping\":true,\"enable_early_stopping\":false,\"early_stopping_n_iters\":10,\"metrics\":null,\"enable_metric_confidence\":false,\"enable_ensembling\":true,\"enable_stack_ensembling\":true,\"ensemble_iterations\":6,\"enable_tf\":false,\"enable_subsampling\":false,\"subsample_seed\":null,\"enable_nimbusml\":false,\"enable_streaming\":false,\"force_streaming\":false,\"track_child_runs\":true,\"allowed_private_models\":[],\"label_column_name\":\"loan_status\",\"weight_column_name\":null,\"cv_split_column_names\":null,\"enable_local_managed\":false,\"_local_managed_run_id\":null,\"cost_mode\":1,\"lag_length\":0,\"metric_operation\":\"maximize\",\"preprocess\":true}',\n  'DataPrepJsonString': '{\\\\\"training_data\\\\\": {\\\\\"datasetId\\\\\": \\\\\"4059c99b-771a-4bdd-aff1-fc3651196631\\\\\"}, \\\\\"validation_data\\\\\": {\\\\\"datasetId\\\\\": \\\\\"6ecb0aae-0bb9-4e46-83e3-fedfcded3434\\\\\"}, \\\\\"datasets\\\\\": 0}',\n  'EnableSubsampling': 'False',\n  'runTemplate': 'AutoML',\n  'azureml.runsource': 'automl',\n  'display_task_type': 'classification',\n  'dependencies_versions': '{\"azureml-widgets\": \"1.30.0\", \"azureml-train\": \"1.30.0\", \"azureml-train-restclients-hyperdrive\": \"1.30.0\", \"azureml-train-core\": \"1.30.0\", \"azureml-train-automl\": \"1.30.0\", \"azureml-train-automl-runtime\": \"1.30.0\", \"azureml-train-automl-client\": \"1.30.0\", \"azureml-tensorboard\": \"1.30.0\", \"azureml-telemetry\": \"1.30.0\", \"azureml-sdk\": \"1.30.0\", \"azureml-samples\": \"0+unknown\", \"azureml-pipeline\": \"1.30.0\", \"azureml-pipeline-steps\": \"1.30.0\", \"azureml-pipeline-core\": \"1.30.0\", \"azureml-opendatasets\": \"1.30.0\", \"azureml-model-management-sdk\": \"1.0.1b6.post1\", \"azureml-mlflow\": \"1.30.0\", \"azureml-interpret\": \"1.32.0\", \"azureml-explain-model\": \"1.32.0\", \"azureml-defaults\": \"1.30.0\", \"azureml-dataset-runtime\": \"1.30.0\", \"azureml-dataprep\": \"2.15.1\", \"azureml-dataprep-rslex\": \"1.13.0\", \"azureml-dataprep-native\": \"33.0.0\", \"azureml-datadrift\": \"1.30.0\", \"azureml-core\": \"1.32.0\", \"azureml-contrib-services\": \"1.30.0\", \"azureml-contrib-server\": \"1.30.0\", \"azureml-contrib-reinforcementlearning\": \"1.30.0\", \"azureml-contrib-pipeline-steps\": \"1.30.0\", \"azureml-contrib-notebook\": \"1.30.0\", \"azureml-contrib-fairness\": \"1.32.0\", \"azureml-contrib-dataset\": \"1.30.0\", \"azureml-cli-common\": \"1.30.0\", \"azureml-automl-runtime\": \"1.30.0\", \"azureml-automl-dnn-nlp\": \"1.30.0\", \"azureml-automl-core\": \"1.30.0\", \"azureml-accel-models\": \"1.30.0\"}',\n  '_aml_system_scenario_identification': 'Remote.Parent',\n  'ClientType': 'SDK',\n  'environment_cpu_name': 'AzureML-AutoML',\n  'environment_cpu_label': 'prod',\n  'environment_gpu_name': 'AzureML-AutoML-GPU',\n  'environment_gpu_label': 'prod',\n  'root_attribution': 'automl',\n  'attribution': 'AutoML',\n  'Orchestrator': 'AutoML',\n  'CancelUri': 'https://centralindia.api.azureml.ms/jasmine/v1.0/subscriptions/23416925-66df-470c-b651-f378856d8ad7/resourceGroups/rohan-rg/providers/Microsoft.MachineLearningServices/workspaces/rohan-ws/experimentids/926e10e6-dadc-4009-a8ed-5e96cd895976/cancel/AutoML_929a79e2-031a-4f39-93e0-2bd14384ba50',\n  'azureml.git.repository_uri': 'https://github.com/rohanchauhan/azure-automl-fair-interpret-model.git',\n  'mlflow.source.git.repoURL': 'https://github.com/rohanchauhan/azure-automl-fair-interpret-model.git',\n  'azureml.git.branch': 'main',\n  'mlflow.source.git.branch': 'main',\n  'azureml.git.commit': '2551c1fb1d1608865b495a99359afc61fa4af560',\n  'mlflow.source.git.commit': '2551c1fb1d1608865b495a99359afc61fa4af560',\n  'azureml.git.dirty': 'True',\n  'ClientSdkVersion': '1.31.0',\n  'snapshotId': '00000000-0000-0000-0000-000000000000',\n  'SetupRunId': 'AutoML_929a79e2-031a-4f39-93e0-2bd14384ba50_setup',\n  'SetupRunContainerId': 'dcid.AutoML_929a79e2-031a-4f39-93e0-2bd14384ba50_setup',\n  'FeaturizationRunJsonPath': 'featurizer_container.json',\n  'FeaturizationRunId': 'AutoML_929a79e2-031a-4f39-93e0-2bd14384ba50_featurize',\n  'ProblemInfoJsonString': '{\"dataset_num_categorical\": 0, \"is_sparse\": true, \"subsampling\": false, \"has_extra_col\": true, \"dataset_classes\": 2, \"dataset_features\": 55, \"dataset_samples\": 22852, \"single_frequency_class_detected\": false}',\n  'ModelExplainRunId': 'AutoML_929a79e2-031a-4f39-93e0-2bd14384ba50_ModelExplain'},\n 'inputDatasets': [{'dataset': {'id': '4059c99b-771a-4bdd-aff1-fc3651196631'}, 'consumptionDetails': {'type': 'RunInput', 'inputName': 'training_data', 'mechanism': 'Direct'}}, {'dataset': {'id': '6ecb0aae-0bb9-4e46-83e3-fedfcded3434'}, 'consumptionDetails': {'type': 'RunInput', 'inputName': 'validation_data', 'mechanism': 'Direct'}}],\n 'outputDatasets': [],\n 'logFiles': {},\n 'submittedBy': 'Aishwarya Singh'}"
          },
          "metadata": {}
        }
      ],
      "execution_count": 12,
      "metadata": {
        "collapsed": true,
        "jupyter": {
          "source_hidden": false,
          "outputs_hidden": false
        },
        "nteract": {
          "transient": {
            "deleting": false
          }
        },
        "gather": {
          "logged": 1625632072156
        }
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "####  Get Best Run"
      ],
      "metadata": {
        "nteract": {
          "transient": {
            "deleting": false
          }
        }
      }
    },
    {
      "cell_type": "code",
      "source": [
        "best_run, fitted_model = automl_run.get_output()\r\n",
        "print(best_run)\r\n",
        "\r\n",
        "print('\\nBest Model Definition:')\r\n",
        "print(fitted_model)\r\n",
        "\r\n",
        "print('\\nBest Run Transformations:')\r\n",
        "for step in fitted_model.named_steps:\r\n",
        "    print(step)\r\n",
        "    \r\n",
        "print('\\nBest Run Metrics:')\r\n",
        "best_run_metrics = best_run.get_metrics()\r\n",
        "for metric_name in best_run_metrics:\r\n",
        "    metric = best_run_metrics[metric_name]\r\n",
        "    print(metric_name, metric)"
      ],
      "outputs": [
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "WARNING:root:The version of the SDK does not match the version the model was trained on.\n",
            "WARNING:root:The consistency in the result may not be guaranteed.\n",
            "WARNING:root:Package:azureml-automl-core, training version:1.31.0, current version:1.30.0\n",
            "Package:azureml-automl-runtime, training version:1.31.0, current version:1.30.0\n",
            "Package:azureml-dataprep, training version:2.18.0, current version:2.15.1\n",
            "Package:azureml-dataprep-native, training version:36.0.0, current version:33.0.0\n",
            "Package:azureml-dataprep-rslex, training version:1.16.0, current version:1.13.0\n",
            "Package:azureml-dataset-runtime, training version:1.31.0, current version:1.30.0\n",
            "Package:azureml-defaults, training version:1.31.0, current version:1.30.0\n",
            "Package:azureml-mlflow, training version:1.31.0, current version:1.30.0\n",
            "Package:azureml-pipeline-core, training version:1.31.0, current version:1.30.0\n",
            "Package:azureml-telemetry, training version:1.31.0, current version:1.30.0\n",
            "Package:azureml-train-automl-client, training version:1.31.0, current version:1.30.0\n",
            "Package:azureml-train-automl-runtime, training version:1.31.0, current version:1.30.0\n",
            "WARNING:root:Please ensure the version of your local conda dependencies match the version on which your model was trained in order to properly retrieve your model.\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Run(Experiment: azure-automl-fair-interpret-model,\n",
            "Id: AutoML_929a79e2-031a-4f39-93e0-2bd14384ba50_0,\n",
            "Type: azureml.scriptrun,\n",
            "Status: Completed)\n",
            "\n",
            "Best Model Definition:\n",
            "Pipeline(memory=None,\n",
            "         steps=[('datatransformer',\n",
            "                 DataTransformer(enable_dnn=False, enable_feature_sweeping=True, feature_sweeping_config={}, feature_sweeping_timeout=86400, featurization_config=None, force_text_dnn=False, is_cross_validation=False, is_onnx_compatible=False, observer=None, task='classification', working_dir='/mnt/batch/tasks/shared/LS_root/moun...\n",
            "    subsampling_schedule='hyperband_clip',\n",
            "    cost_mode_param=None,\n",
            "    iteration_timeout_mode=0,\n",
            "    iteration_timeout_param=None,\n",
            "    feature_column_names=None,\n",
            "    label_column_name=None,\n",
            "    weight_column_name=None,\n",
            "    cv_split_column_names=None,\n",
            "    enable_streaming=None,\n",
            "    timeseries_param_dict=None,\n",
            "    gpu_training_param_dict={'processing_unit_type': 'cpu'}\n",
            "), random_state=None))],\n",
            "         verbose=False)\n",
            "\n",
            "Best Run Transformations:\n",
            "datatransformer\n",
            "MaxAbsScaler\n",
            "LightGBMClassifier\n",
            "\n",
            "Best Run Metrics:\n",
            "AUC_weighted 0.948567998793658\n",
            "average_precision_score_macro 0.942607227596187\n",
            "AUC_micro 0.9771106683802441\n",
            "norm_macro_recall 0.722218123540364\n",
            "balanced_accuracy 0.861109061770182\n",
            "precision_score_macro 0.9557034149373274\n",
            "f1_score_micro 0.937814780552986\n",
            "accuracy 0.937814780552986\n",
            "log_loss 0.18762578108432748\n",
            "AUC_macro 0.9485679987936582\n",
            "precision_score_micro 0.937814780552986\n",
            "recall_score_micro 0.937814780552986\n",
            "matthews_correlation 0.8113165414645166\n",
            "precision_score_weighted 0.9407831530108983\n",
            "weighted_accuracy 0.9771716886334301\n",
            "f1_score_macro 0.8982230971041926\n",
            "average_precision_score_weighted 0.9652968861261935\n",
            "recall_score_macro 0.861109061770182\n",
            "recall_score_weighted 0.937814780552986\n",
            "average_precision_score_micro 0.9773617221992242\n",
            "f1_score_weighted 0.934232737999692\n",
            "confusion_matrix aml://artifactId/ExperimentRun/dcid.AutoML_929a79e2-031a-4f39-93e0-2bd14384ba50_0/confusion_matrix\n",
            "accuracy_table aml://artifactId/ExperimentRun/dcid.AutoML_929a79e2-031a-4f39-93e0-2bd14384ba50_0/accuracy_table\n"
          ]
        }
      ],
      "execution_count": 59,
      "metadata": {
        "collapsed": true,
        "jupyter": {
          "source_hidden": false,
          "outputs_hidden": false
        },
        "nteract": {
          "transient": {
            "deleting": false
          }
        },
        "gather": {
          "logged": 1625636572074
        }
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "#### Explain Model using PFI Explainer and Get Global Feature Importance Values"
      ],
      "metadata": {
        "nteract": {
          "transient": {
            "deleting": false
          }
        }
      }
    },
    {
      "cell_type": "code",
      "source": [
        "from interpret.ext.blackbox import PFIExplainer\r\n",
        "import matplotlib.pyplot as plt\r\n",
        "\r\n",
        "df = tab_dataset.to_pandas_dataframe()\r\n",
        "features = list(df.columns).remove('loan_status')\r\n",
        "classes = df.loan_status.unique()\r\n",
        "\r\n",
        "X_train = train_ds.to_pandas_dataframe().drop('loan_status', axis=1)\r\n",
        "y_train = train_ds.to_pandas_dataframe().loan_status\r\n",
        "\r\n",
        "X_test = test_ds.to_pandas_dataframe().drop('loan_status', axis=1)\r\n",
        "y_test = test_ds.to_pandas_dataframe().loan_status\r\n",
        "\r\n",
        "pfi_explainer = PFIExplainer(model=fitted_model,\r\n",
        " features=features,\r\n",
        " classes=classes)\r\n",
        "\r\n",
        "# PFIExplainer\r\n",
        "global_explanation = pfi_explainer.explain_global(X_train, y_train)\r\n",
        "global_feature_importance = global_explanation.get_feature_importance_dict()\r\n",
        "\r\n",
        "# Figure\r\n",
        "fig = plt.figure(figsize=(15,5))\r\n",
        "top_n = 5 #len(global_feature_importance)\r\n",
        "plt.bar(range(top_n), list(global_feature_importance.values())[:top_n], align='center')\r\n",
        "plt.xticks(range(top_n), list(global_feature_importance.keys())[:top_n], rotation=15)\r\n",
        "plt.tick_params(labelsize=18)\r\n",
        "\r\n",
        "plt.title(\"Top {} Features\".format(top_n), fontsize=24)\r\n",
        "plt.xlabel(\"Features\", fontsize=22)\r\n",
        "plt.ylabel(\"Feature Importance\", fontsize=22)\r\n",
        "plt.show()"
      ],
      "outputs": [
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "11it [00:04,  2.27it/s]\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": "<Figure size 1080x360 with 1 Axes>",
            "image/png": "\n"
          },
          "metadata": {
            "needs_background": "light"
          }
        }
      ],
      "execution_count": 58,
      "metadata": {
        "collapsed": true,
        "jupyter": {
          "source_hidden": false,
          "outputs_hidden": false
        },
        "nteract": {
          "transient": {
            "deleting": false
          }
        },
        "gather": {
          "logged": 1625636504670
        }
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "#### Register the Model"
      ],
      "metadata": {
        "nteract": {
          "transient": {
            "deleting": false
          }
        }
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# Register model\r\n",
        "best_run.register_model(model_path='outputs/model.pkl', model_name='credit_risk_model',\r\n",
        "    tags={'Training context':'Auto ML Credit Risk Model'},\r\n",
        "    properties={'AUC': best_run_metrics['AUC_weighted'], 'Accuracy': best_run_metrics['accuracy']})"
      ],
      "outputs": [
        {
          "output_type": "execute_result",
          "execution_count": 60,
          "data": {
            "text/plain": "Model(workspace=Workspace.create(name='rohan-ws', subscription_id='23416925-66df-470c-b651-f378856d8ad7', resource_group='rohan-rg'), name=credit_risk_model, id=credit_risk_model:1, version=1, tags={'Training context': 'Auto ML Credit Risk Model'}, properties={'AUC': '0.948567998793658', 'Accuracy': '0.937814780552986'})"
          },
          "metadata": {}
        }
      ],
      "execution_count": 60,
      "metadata": {
        "collapsed": true,
        "jupyter": {
          "source_hidden": false,
          "outputs_hidden": false
        },
        "nteract": {
          "transient": {
            "deleting": false
          }
        },
        "gather": {
          "logged": 1625636643717
        }
      }
    }
  ],
  "metadata": {
    "kernelspec": {
      "name": "python3-azureml",
      "language": "python",
      "display_name": "Python 3.6 - AzureML"
    },
    "language_info": {
      "name": "python",
      "version": "3.6.9",
      "mimetype": "text/x-python",
      "codemirror_mode": {
        "name": "ipython",
        "version": 3
      },
      "pygments_lexer": "ipython3",
      "nbconvert_exporter": "python",
      "file_extension": ".py"
    },
    "kernel_info": {
      "name": "python3-azureml"
    },
    "nteract": {
      "version": "nteract-front-end@1.0.0"
    },
    "microsoft": {
      "host": {
        "AzureML": {
          "notebookHasBeenCompleted": true
        }
      }
    }
  },
  "nbformat": 4,
  "nbformat_minor": 2
}